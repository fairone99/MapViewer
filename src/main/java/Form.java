import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashSet;
import java.util.Set;
import javax.swing.*;

import org.jdesktop.swingx.JXMapViewer;
import org.jdesktop.swingx.JXPanel;
import org.jdesktop.swingx.mapviewer.DefaultTileFactory;
import org.jdesktop.swingx.mapviewer.GeoPosition;
import org.jdesktop.swingx.mapviewer.TileFactory;
import org.jdesktop.swingx.mapviewer.TileFactoryInfo;
import org.jdesktop.swingx.mapviewer.Waypoint;
import org.jdesktop.swingx.mapviewer.WaypointPainter;
import org.jdesktop.swingx.mapviewer.bmng.CylindricalProjectionTileFactory;
import org.jdesktop.swingx.painter.AbstractPainter;
import org.jdesktop.swingx.painter.CompoundPainter;


public class Form extends JFrame {
    private boolean zoomSliderVisible = true;
    private boolean zoomButtonsVisible = true;

    private org.jdesktop.swingx.JXMapViewer mainMap;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    private javax.swing.JSlider zoomSlider;

    private Providers defaultProvider = Providers.SwingLabsBlueMarble;

    private boolean addressLocationShown = true;

    private boolean dataProviderCreditShown = true;

    public Form() {
        super("title");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setSize(1000, 800);
        setVisible(true);

        initComponents();
        setDataProviderCreditShown(false);

        zoomSlider.setOpaque(false);
        try {
            Icon minusIcon = new ImageIcon(getClass().getResource(
                    "/org/jdesktop/swingx/mapviewer/resources/minus.png"));
            this.zoomOutButton.setIcon(minusIcon);
            this.zoomOutButton.setText("");
            Icon plusIcon = new ImageIcon(getClass().getResource(
                    "/org/jdesktop/swingx/mapviewer/resources/plus.png"));
            this.zoomInButton.setIcon(plusIcon);
            this.zoomInButton.setText("");
        } catch (Throwable thr) {
            System.out.println("error: " + thr.getMessage());
            thr.printStackTrace();
        }

        setTileFactory(new CylindricalProjectionTileFactory());

        mainMap.setCenterPosition(new GeoPosition(0,0));
        mainMap.setRestrictOutsidePanning(true);

        rebuildMainMapOverlay();

        mainMap.addPropertyChangeListener("zoom",new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                zoomSlider.setValue(mainMap.getZoom());
            }
        });

        if(getDefaultProvider() == Providers.OpenStreetMaps) {
            setZoom(10);
        } else {
            setZoom(3);// joshy: hack, i shouldn't need this here
        }
        this.setCenterPosition(new GeoPosition(0,0));
    }

    private boolean zoomChanging = false;

    /**
     * Set the current zoomlevel for the main map. The minimap will
     * be updated accordingly
     * @param zoom the new zoom level
     */
    public void setZoom(int zoom) {
        zoomChanging = true;
        mainMap.setZoom(zoom);
        //boolean sliderReversed = false;
        zoomSlider.setValue(zoom);
        zoomChanging = false;
    }

    /**
     * Returns an action which can be attached to buttons or menu
     * items to make the map zoom out
     * @return a preconfigured Zoom Out action
     */
    public Action getZoomOutAction() {
        Action act = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                setZoom(mainMap.getZoom()-1);
            }
        };
        act.putValue(Action.NAME,"-");
        return act;
    }

    /**
     * Returns an action which can be attached to buttons or menu
     * items to make the map zoom in
     * @return a preconfigured Zoom In action
     */
    public Action getZoomInAction() {
        Action act = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                setZoom(mainMap.getZoom()+1);
            }
        };
        act.putValue(Action.NAME,"+");
        return act;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        JXPanel jxPanel = new JXPanel();

        jxPanel.setLayout(new java.awt.GridBagLayout());

        JPanel mapPanel = new JPanel();

        mapPanel.setOpaque(false);
        mapPanel.setLayout(new java.awt.GridBagLayout());

        initMenu();

        initZoomControl(mapPanel);

        initMapControl(jxPanel, mapPanel);
    }

    private void initMapControl(JXPanel jxPanel, JPanel mapPanel) {
        GridBagConstraints gridBagConstraints;
        mainMap = new JXMapViewer();

        mainMap.setLayout(new GridBagLayout());

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(4, 4, 4, 4);
        mainMap.add(mapPanel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jxPanel.add(mainMap, gridBagConstraints);

        add(jxPanel);
    }

    private void initZoomControl(JPanel mapPanel) {
        GridBagConstraints gridBagConstraints;
        zoomInButton = new JButton();
        zoomOutButton = new JButton();
        zoomSlider = new JSlider();

        zoomInButton.setAction(getZoomOutAction());
        zoomInButton.setIcon(new ImageIcon(getClass().getResource("/org/jdesktop/swingx/mapviewer/resources/plus.png")));
        zoomInButton.setMargin(new Insets(2, 2, 2, 2));
        zoomInButton.setMaximumSize(new Dimension(20, 20));
        zoomInButton.setMinimumSize(new Dimension(20, 20));
        zoomInButton.setOpaque(false);
        zoomInButton.setPreferredSize(new Dimension(20, 20));
        zoomInButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mapPanel.add(zoomInButton, gridBagConstraints);

        zoomOutButton.setAction(getZoomInAction());
        zoomOutButton.setIcon(new ImageIcon(getClass().getResource("/org/jdesktop/swingx/mapviewer/resources/minus.png")));
        zoomOutButton.setMargin(new Insets(2, 2, 2, 2));
        zoomOutButton.setMaximumSize(new Dimension(20, 20));
        zoomOutButton.setMinimumSize(new Dimension(20, 20));
        zoomOutButton.setOpaque(false);
        zoomOutButton.setPreferredSize(new Dimension(20, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        mapPanel.add(zoomOutButton, gridBagConstraints);

        zoomSlider.setMajorTickSpacing(1);
        zoomSlider.setMaximum(15);
        zoomSlider.setMinimum(10);
        zoomSlider.setMinorTickSpacing(1);
        zoomSlider.setOrientation(JSlider.VERTICAL);
        zoomSlider.setPaintTicks(true);
        zoomSlider.setSnapToTicks(true);
        zoomSlider.setMinimumSize(new Dimension(35, 100));
        zoomSlider.setPreferredSize(new Dimension(35, 190));
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = GridBagConstraints.NORTH;
        mapPanel.add(zoomSlider, gridBagConstraints);
    }

    private void initMenu() {
        JMenuBar jMenuBar = new JMenuBar();
        setJMenuBar(jMenuBar);

        JMenu fileMenu = new JMenu("File");
        JMenu viewMenu = new JMenu("View");
        JMenu toolsMenu = new JMenu("Tools");
        JMenu aboutMenu = new JMenu("About");

        jMenuBar.add(fileMenu);
        jMenuBar.add(viewMenu);
        jMenuBar.add(toolsMenu);
        jMenuBar.add(aboutMenu);

        //add exit button to menu
        JMenuItem exit = new JMenuItem("Exit");
        exit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        fileMenu.add(exit);
    }

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zoomInButtonActionPerformed

    private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged
        if(!zoomChanging){
            setZoom(zoomSlider.getValue());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_zoomSliderStateChanged


    /**
     * Indicates if the zoom slider is currently visible
     * @return the current value of the zoomSliderVisible property
     */
    public boolean isZoomSliderVisible() {
        return zoomSliderVisible;
    }

    /**
     * Sets if the zoom slider should be visible
     * @param zoomSliderVisible the new value of the zoomSliderVisible property
     */
    public void setZoomSliderVisible(boolean zoomSliderVisible) {
        boolean old = this.isZoomSliderVisible();
        this.zoomSliderVisible = zoomSliderVisible;
        zoomSlider.setVisible(zoomSliderVisible);
        firePropertyChange("zoomSliderVisible",old,this.isZoomSliderVisible());
    }

    /**
     * Indicates if the zoom buttons are visible. This is a bound property
     * and can be listed for using a PropertyChangeListener
     * @return current value of the zoomButtonsVisible property
     */
    public boolean isZoomButtonsVisible() {
        return zoomButtonsVisible;
    }

    /**
     * Sets if the zoom buttons should be visible. This ia bound property.
     * Changes can be listened for using a PropertyChaneListener
     * @param zoomButtonsVisible new value of the zoomButtonsVisible property
     */
    public void setZoomButtonsVisible(boolean zoomButtonsVisible) {
        boolean old = this.isZoomButtonsVisible();
        this.zoomButtonsVisible = zoomButtonsVisible;
        zoomInButton.setVisible(zoomButtonsVisible);
        zoomOutButton.setVisible(zoomButtonsVisible);
        firePropertyChange("zoomButtonsVisible",old,this.isZoomButtonsVisible());
    }

    /**
     * Sets the tile factory for both embedded JXMapViewer components.
     * Calling this method will also reset the center and zoom levels
     * of both maps, as well as the bounds of the zoom slider.
     * @param fact the new TileFactory
     */
    public void setTileFactory(TileFactory fact) {
        mainMap.setTileFactory(fact);
        mainMap.setZoom(fact.getInfo().getDefaultZoomLevel());
        mainMap.setCenterPosition(new GeoPosition(0,0));

        zoomSlider.setMinimum(fact.getInfo().getMinimumZoomLevel());
        zoomSlider.setMaximum(fact.getInfo().getMaximumZoomLevel());
    }

    public void setCenterPosition(GeoPosition pos) {
        mainMap.setCenterPosition(pos);
    }

    public GeoPosition getCenterPosition() {
        return mainMap.getCenterPosition();
    }

    public GeoPosition getAddressLocation() {
        return mainMap.getAddressLocation();
    }

    public void setAddressLocation(GeoPosition pos) {
        mainMap.setAddressLocation(pos);
    }

    /**
     * Returns a reference to the main embedded JXMapViewer component
     * @return the main map
     */
    public JXMapViewer getMainMap() {
        return this.mainMap;
    }

    /**
     * returns a reference to the zoom in button
     * @return a jbutton
     */
    public JButton getZoomInButton() {
        return this.zoomInButton;
    }
    /**
     * returns a reference to the zoom out button
     * @return a jbutton
     */
    public JButton getZoomOutButton() {
        return this.zoomOutButton;
    }
    /**
     * returns a reference to the zoom slider
     * @return a jslider
     */
    public JSlider getZoomSlider() {
        return this.zoomSlider;
    }

    public void setAddressLocationShown(boolean b) {
        boolean old = isAddressLocationShown();
        this.addressLocationShown = b;
        addressLocationPainter.setVisible(b);
        firePropertyChange("addressLocationShown",old,b);
        repaint();
    }

    public boolean isAddressLocationShown() {
        return addressLocationShown;
    }

    public void setDataProviderCreditShown(boolean b) {
        boolean old = isDataProviderCreditShown();
        this.dataProviderCreditShown = b;
        dataProviderCreditPainter.setVisible(b);
        repaint();
        firePropertyChange("dataProviderCreditShown",old,b);
    }

    public boolean isDataProviderCreditShown() {
        return dataProviderCreditShown;
    }

    private void rebuildMainMapOverlay() {
        CompoundPainter cp = new CompoundPainter();
        cp.setCacheable(false);
        /*
        List<Painter> ptrs = new ArrayList<Painter>();
        if(isDataProviderCreditShown()) {
            ptrs.add(dataProviderCreditPainter);
        }
        if(isAddressLocationShown()) {
            ptrs.add(addressLocationPainter);
        }*/
        cp.setPainters(dataProviderCreditPainter, addressLocationPainter);
        mainMap.setOverlayPainter(cp);
    }

    public void setDefaultProvider(Providers prov) {
        Providers old = this.defaultProvider;
        this.defaultProvider = prov;
        if(prov == Providers.SwingLabsBlueMarble) {
            setTileFactory(new CylindricalProjectionTileFactory());
            setZoom(3);
        }
        if(prov == Providers.OpenStreetMaps) {
            final int max = 17;
            TileFactoryInfo info = new TileFactoryInfo(1,max-2,max,
                    256, true, true, // tile size is 256 and x/y orientation is normal
                    "http://tile.openstreetmap.org",//5/15/10.png",
                    "x","y","z") {
                public String getTileUrl(int x, int y, int zoom) {
                    zoom = max-zoom;
                    String url = this.baseURL +"/"+zoom+"/"+x+"/"+y+".png";
                    return url;
                }

            };
            TileFactory tf = new DefaultTileFactory(info);
            setTileFactory(tf);
            setZoom(11);
            setAddressLocation(new GeoPosition(51.5,0));
        }
        firePropertyChange("defaultProvider", old, prov);
        repaint();
    }
    public Providers getDefaultProvider() {
        return this.defaultProvider;
    }




    private AbstractPainter dataProviderCreditPainter = new AbstractPainter<JXMapViewer>(false) {
        protected void doPaint(Graphics2D g, JXMapViewer map, int width, int height) {
            g.setPaint(Color.WHITE);
            g.drawString("data ",50,
                    map.getHeight()-10);
        }
    };

    private WaypointPainter addressLocationPainter = new WaypointPainter() {
        public Set<Waypoint> getWaypoints() {
            Set set = new HashSet();
            if(getAddressLocation() != null) {
                set.add(new Waypoint(getAddressLocation()));
            } else {
                set.add(new Waypoint(0,0));
            }
            return set;
        }
    };
}
